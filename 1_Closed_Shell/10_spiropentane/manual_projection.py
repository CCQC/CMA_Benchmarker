import numpy as np
from numpy.linalg import norm
from scipy.linalg import block_diag

class Projection(object):
    """
    This class is used to specify the manual projection matrix
    for CMA. It is stored as an object and is only needed when
    self.options.man_proj = True.
    """

    def __init__(self,  options):

        self.options = options

    def run(self):
        """
        Example matrix block
        mat = normalize(np.array([
        [1,..,0],
        ]).T)
        """
      
        HA_str = normalize(np.array([
        [ 1, 1, 1, 1, 1, 1],
        [ 1, 1, 1,-1,-1,-1],
        [-1,-1, 2,-1,-1, 2],
        [-1,-1, 2, 1, 1,-2],
        [ 1,-1, 0, 1,-1, 0],
        [ 1,-1, 0,-1, 1, 0],
        ]).T) 
      
        CH_str = normalize(np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1,-1,-1,-1,-1],
        [1, 1,-1,-1, 1, 1,-1,-1],
        [1, 1,-1,-1,-1,-1, 1, 1],
        [1,-1, 1,-1, 1,-1, 1,-1],
        [1,-1, 1,-1,-1, 1,-1, 1],
        [1,-1,-1, 1, 1,-1,-1, 1],
        [1,-1,-1, 1,-1, 1, 1,-1],
        ]).T) 

        CC_ang = normalize(np.array([
        [1, 1,-1,-1],
        [1,-1, 1,-1],
        [1,-1,-1, 1],
        ]).T) 

        CH_ang = normalize(np.array([
        [4,-1,-1,-1,-1, 4,-1,-1,-1,-1, 4,-1,-1,-1,-1, 4,-1,-1,-1,-1],
        [4,-1,-1,-1,-1, 4,-1,-1,-1,-1,-4, 1, 1, 1, 1,-4, 1, 1, 1, 1],
        [4,-1,-1,-1,-1,-4, 1, 1, 1, 1, 4,-1,-1,-1,-1,-4, 1, 1, 1, 1],
        [4,-1,-1,-1,-1,-4, 1, 1, 1, 1,-4, 1, 1, 1, 1, 4,-1,-1,-1,-1],
        [0, 1, 1,-1,-1, 0, 1, 1,-1,-1, 0, 1, 1,-1,-1, 0, 1, 1,-1,-1],
        [0, 1, 1,-1,-1, 0, 1, 1,-1,-1, 0,-1,-1, 1, 1, 0,-1,-1, 1, 1],
        [0, 1, 1,-1,-1, 0,-1,-1, 1, 1, 0, 1, 1,-1,-1, 0,-1,-1, 1, 1],
        [0, 1, 1,-1,-1, 0,-1,-1, 1, 1, 0,-1,-1, 1, 1, 0, 1, 1,-1,-1],
        [0, 1,-1, 1,-1, 0, 1,-1, 1,-1, 0, 1,-1, 1,-1, 0, 1,-1, 1,-1],
        [0, 1,-1, 1,-1, 0, 1,-1, 1,-1, 0,-1, 1,-1, 1, 0,-1, 1,-1, 1],
        [0, 1,-1, 1,-1, 0,-1, 1,-1, 1, 0, 1,-1, 1,-1, 0,-1, 1,-1, 1],
        [0, 1,-1, 1,-1, 0,-1, 1,-1, 1, 0,-1, 1,-1, 1, 0, 1,-1, 1,-1],
        [0, 1,-1,-1, 1, 0, 1,-1,-1, 1, 0, 1,-1,-1, 1, 0, 1,-1,-1, 1],
        [0, 1,-1,-1, 1, 0, 1,-1,-1, 1, 0,-1, 1, 1,-1, 0,-1, 1, 1,-1],
        [0, 1,-1,-1, 1, 0,-1, 1, 1,-1, 0, 1,-1,-1, 1, 0,-1, 1, 1,-1],
        [0, 1,-1,-1, 1, 0,-1, 1, 1,-1, 0,-1, 1, 1,-1, 0, 1,-1,-1, 1],
        ]).T)

        Proj = block_diag(HA_str,CH_str,CC_ang,CH_ang)

        self.Proj = Proj
        
        self.sym_sort = np.array([
            [0,
            2,
            6,
            17,
            25],
            [11,
            22,
            30],
            [10,
            16,
            21,
            29],
            [1,
            3,
            7,
            18,
            26],
            [4,
            5,
            8,
            9,
            12,
            13,
            14,
            15,
            19,
            20,
            23,
            24,
            27,
            28,
            31,
            32]
            ],dtype=object)

def normalize(mat):
    return 1/norm(mat,axis=0)*mat

if __name__=="__main__":
    np.set_printoptions(linewidth=400, precision=2,threshold=100000)
    p = Projection([])
    p.run()
    print(p.Proj)
