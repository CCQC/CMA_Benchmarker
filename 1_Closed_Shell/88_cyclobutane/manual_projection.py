import numpy as np
from numpy.linalg import norm
from scipy.linalg import block_diag

class Projection(object):
    """
    This class is used to specify the manual projection matrix
    for CMA. It is stored as an object and is only needed when
    self.options.man_proj = True.
    """

    def __init__(self,  options):

        self.options = options

    def run(self):
        

        # 0-3
        HA_str = normalize(np.array([
        [1, 1, 1, 1],
        [1, 1,-1,-1],
        [1,-1, 1,-1],
        [1,-1,-1, 1],
        ]).T)
       
        # 4-11
        CH_str = normalize(np.array([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1,-1,-1,-1,-1],
        [1, 1,-1,-1, 1, 1,-1,-1],
        [1, 1,-1,-1,-1,-1, 1, 1],
        [1,-1, 1,-1, 1,-1, 1,-1],
        [1,-1, 1,-1,-1, 1,-1, 1],
        [1,-1,-1, 1, 1,-1,-1, 1],
        [1,-1,-1, 1,-1, 1, 1,-1],
        ]).T)
       
        # 12
        HA_ang = normalize(np.array([
        [1,-1, 1,-1],
        ]).T)

        # 13-28
        CH_ang = normalize(np.array([
        [4,-1,-1,-1,-1, 4,-1,-1,-1,-1, 4,-1,-1,-1,-1, 4,-1,-1,-1,-1],
        [4,-1,-1,-1,-1, 4,-1,-1,-1,-1,-4, 1, 1, 1, 1,-4, 1, 1, 1, 1],
        [4,-1,-1,-1,-1,-4, 1, 1, 1, 1, 4,-1,-1,-1,-1,-4, 1, 1, 1, 1],
        [4,-1,-1,-1,-1,-4, 1, 1, 1, 1,-4, 1, 1, 1, 1, 4,-1,-1,-1,-1],
        [0, 1, 1,-1,-1, 0, 1, 1,-1,-1, 0, 1, 1,-1,-1, 0, 1, 1,-1,-1],
        [0, 1, 1,-1,-1, 0, 1, 1,-1,-1, 0,-1,-1, 1, 1, 0,-1,-1, 1, 1],
        [0, 1, 1,-1,-1, 0,-1,-1, 1, 1, 0, 1, 1,-1,-1, 0,-1,-1, 1, 1],
        [0, 1, 1,-1,-1, 0,-1,-1, 1, 1, 0,-1,-1, 1, 1, 0, 1, 1,-1,-1],
        [0, 1,-1, 1,-1, 0, 1,-1, 1,-1, 0, 1,-1, 1,-1, 0, 1,-1, 1,-1],
        [0, 1,-1, 1,-1, 0, 1,-1, 1,-1, 0,-1, 1,-1, 1, 0,-1, 1,-1, 1],
        [0, 1,-1, 1,-1, 0,-1, 1,-1, 1, 0, 1,-1, 1,-1, 0,-1, 1,-1, 1],
        [0, 1,-1, 1,-1, 0,-1, 1,-1, 1, 0,-1, 1,-1, 1, 0, 1,-1, 1,-1],
        [0, 1,-1,-1, 1, 0, 1,-1,-1, 1, 0, 1,-1,-1, 1, 0, 1,-1,-1, 1],
        [0, 1,-1,-1, 1, 0, 1,-1,-1, 1, 0,-1, 1, 1,-1, 0,-1, 1, 1,-1],
        [0, 1,-1,-1, 1, 0,-1, 1, 1,-1, 0, 1,-1,-1, 1, 0,-1, 1, 1,-1],
        [0, 1,-1,-1, 1, 0,-1, 1, 1,-1, 0,-1, 1, 1,-1, 0, 1,-1,-1, 1],
        ]).T)
        
        # 29
        tor = normalize(np.array([
        [1,-1, 1,-1],
        ]).T)

        Proj = block_diag(HA_str,CH_str,HA_ang,CH_ang,tor)

        self.Proj = Proj
        
        # a1, a2, b1, b2, e irreps
        self.sym_sort = np.array([
            [0,4,8,13,17,29],
            [21,25],
            [2,23,27],
            [6,10,12,15,19],
            [1,3,5,7,9,11,14,16,18,20,22,24,26,28]],dtype=object)

def normalize(mat):
    return 1/norm(mat,axis=0)*mat

if __name__=="__main__":
    np.set_printoptions(linewidth=400, precision=2,threshold=100000)
    p = Projection([])
    p.run()
    print(p.Proj)

